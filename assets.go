// Code generated by go-bindata.
// sources:
// assets/template/email.txt
// assets/template/grunt.html
// assets/template/header.html
// assets/template/help.html
// assets/template/job.html
// assets/template/jobs.html
// assets/template/service.html
// assets/template/services.html
// README.md
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateEmailTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\xc1\x6a\x83\x40\x10\x86\xef\xf3\x14\x73\xf0\xd0\x42\xa3\x77\xa1\xb7\xa4\x90\xd2\x52\xa8\xc9\x03\xac\x71\xd4\xb5\xba\x2b\xeb\x6c\xa0\x0c\xf3\xee\x45\x6b\x12\xd2\xde\x76\xff\xfd\xfe\x9d\x8f\x39\xf8\x1c\x45\x52\xf6\xaa\x50\xc4\xb2\xa3\x13\xe7\xf8\x49\x53\xec\x79\x42\x5f\xcf\x6f\x9d\x2f\xd3\x9d\xab\x46\x6f\x1d\xab\x02\xec\xd1\x0c\xc8\x2d\x21\x0d\xc6\xf6\x58\xfb\xb0\xdc\x9a\x10\x1d\x63\xe7\xcb\xff\x1d\x7c\x58\xa3\xe3\x71\xbf\x55\x7d\x4c\x01\x5e\x7d\x89\x5b\x62\x63\xfb\x09\x4d\x20\x6c\x29\x50\x8e\x2d\xf3\x98\x67\x99\x48\x7a\xf2\xae\xb6\x4d\x5a\x50\x38\x53\x50\xcd\x3a\x5f\x66\x77\x9f\x00\x88\x24\xbf\x14\xe6\xcf\xb8\x16\x54\x45\x92\x18\x6d\xb5\x64\x37\x5a\x24\x18\xd7\x10\x26\x5f\xf4\xfd\x84\xc9\xd9\xf4\x91\xae\xc8\x8b\xed\xe9\xdd\x8c\xaa\x30\x9f\x50\x64\xa6\x54\x71\xb3\xb9\x09\x25\x7f\x85\x02\x4d\xbc\x5a\x2d\x03\x55\xb3\xda\xf6\x94\x5d\xda\x20\x42\xae\x9a\x3d\x0f\x2d\x2d\x6b\x99\xd8\x04\xa6\x0a\x0d\x5f\x36\x54\xcc\xc9\xc1\x0e\xa4\x7a\xa5\x6a\xeb\xec\xd4\xde\x61\x3b\x57\xad\x10\xbc\xf9\x26\x87\x35\xfe\x88\x3c\x46\x4e\x0b\x0e\xd6\x35\xaa\xf0\x13\x00\x00\xff\xff\x0f\x40\xe2\xe8\xcb\x01\x00\x00")

func templateEmailTxtBytes() ([]byte, error) {
	return bindataRead(
		_templateEmailTxt,
		"template/email.txt",
	)
}

func templateEmailTxt() (*asset, error) {
	bytes, err := templateEmailTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/email.txt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateGruntHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x52\xc1\x6e\xd5\x30\x10\xbc\xf7\x2b\x16\x9f\xa9\x97\x50\x89\x43\xe5\xe4\x02\x88\x23\x1c\xb8\x70\x74\x9c\xe5\xc5\xc1\xb1\x83\x77\x5f\xda\xa7\xaa\xff\x8e\x1c\x27\xad\xa8\xe8\x81\x53\x66\x26\xa3\xd9\xd5\x8e\xcd\x9b\x4f\x5f\x3f\x7e\xff\xf1\xed\x33\x8c\x32\x87\xee\xca\xd4\x0f\x80\x19\xc9\x0e\x05\x00\x18\xf1\x12\xa8\x3b\xe5\x73\x14\x83\x95\xd4\x1f\x33\x89\x85\x68\x67\x6a\xd5\xea\xe9\x6e\x49\x59\x14\xb8\x14\x85\xa2\xb4\xea\xce\x0f\x32\xb6\x03\xad\xde\xd1\xf5\x46\xde\x82\x8f\x5e\xbc\x0d\xd7\xec\x6c\xa0\xb6\x51\x7b\x50\xf0\xf1\x17\x64\x0a\xad\x62\xb9\x04\xe2\x91\x48\x14\x8c\x99\x7e\xb6\x6a\x14\x59\x6e\x11\x67\x7b\xef\x86\xa8\xfb\x94\x84\x25\xdb\xa5\x10\x97\x66\x7c\x12\xf0\x46\xdf\xe8\x0f\xe8\x98\x9f\x35\x3d\xfb\xa8\x1d\xf3\x31\x87\x5d\xf6\x8b\x00\x67\x57\x73\xf9\x16\xd1\x4e\xf6\x5e\x9f\x52\x3a\x05\xb2\x8b\xe7\x2d\xb4\x68\x18\x7c\xcf\x38\xfd\x3e\x53\xbe\x60\xa3\x9b\xf7\xfa\xdd\xce\xb6\xd4\x89\x55\x67\xb0\x06\xbe\x92\xfe\x1f\x5b\x4f\x2f\x97\x7e\x19\x6f\xf0\x28\xc4\xf4\x69\xb8\xd4\x89\x0f\x0f\x20\x34\x2f\xc1\x0a\x81\x3a\xd0\x66\xa4\xac\x4b\x93\x0a\x34\x3c\x3e\xd6\xed\x06\xbf\x82\x0b\x96\xb9\x55\xa5\x22\xeb\x23\xe5\xfd\x2e\xa5\xee\xa6\xfb\x52\x0b\x1e\x9b\x67\x31\xe3\x13\xb6\x47\x1d\x14\x96\x9a\xdd\x15\x68\xd0\x76\xa6\xff\x87\x8f\x29\x97\xe2\x79\xf7\x1e\xf4\x55\xff\x94\xfa\xc3\x9b\xcf\x31\xfa\x78\x82\x22\xfd\xed\x37\x38\xf8\xb5\x9e\xa3\x5e\xc1\x60\x7d\xb0\x57\x7f\x02\x00\x00\xff\xff\xdf\x23\x4e\x77\xc9\x02\x00\x00")

func templateGruntHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateGruntHtml,
		"template/grunt.html",
	)
}

func templateGruntHtml() (*asset, error) {
	bytes, err := templateGruntHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/grunt.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x53\xb1\x8e\xdb\x30\x0c\xdd\xef\x2b\x58\x75\x69\x07\x45\xe8\x2e\x7b\xe8\xd2\x1f\x28\xba\xd3\x16\xed\xa8\x60\x28\x83\x92\x8d\x0b\x0e\xf7\xef\x85\x4f\x72\x10\x04\x08\x3a\xdd\x60\x88\xa4\xde\xe3\x7b\xa0\x29\x2f\xb8\xc1\xc8\x98\x73\x67\x04\xb7\x01\x15\xea\x61\x03\x4d\xb8\x72\x31\xfd\x0b\x80\x0f\xf1\x86\x1a\x93\x14\x8c\x42\x6a\x27\x5e\x63\xf8\xb8\x07\xf0\x5f\xac\x85\x9f\x8a\x12\x60\xff\x4a\x9a\x67\x26\x98\xa9\xc0\xac\x69\x5d\x28\xc0\x94\x14\x06\x2a\x85\x14\x2e\x69\x88\x4c\x10\x62\x5e\x18\xaf\x60\x6d\xeb\x71\xa7\xd2\x4c\x9c\x09\x03\x69\xd3\x00\xf0\xc3\x5a\x4a\x12\x28\xd7\x85\x3a\x53\x13\xf3\x40\x69\xd2\x63\x62\xc6\x25\x53\x30\x10\xb0\x60\x2b\xef\xf6\x6b\xfd\x28\xa3\xce\x54\x3a\xf3\x75\xc8\x96\x5e\xf1\xb2\x30\xd9\xd6\xe8\x40\xda\x1f\x06\x50\x23\x5a\x7a\x5d\x50\x02\x85\xce\x4c\xc8\x99\x6e\xae\x00\x7c\x5e\x50\x0e\x1f\x59\x6d\x12\xbe\x9a\xfe\x77\x75\x22\xb8\xc5\x19\x4b\x4c\xe2\xdd\x8e\x7b\x42\x8b\x63\x12\x3b\xa0\x9a\xfe\x33\x61\xde\xd5\xa9\xdd\x72\x7c\x18\xdf\xb0\xff\x43\x03\x67\xa5\xa9\x33\x6e\xd6\x55\xca\xe9\x5c\x2e\x6c\xfa\x5f\x7b\x0c\x3e\x5f\x90\xb9\xff\xf6\xf6\x06\xa7\x8d\x34\xc7\x24\xa7\x3f\xf5\x84\xf7\xf7\xef\xde\xd5\x7b\xef\xf0\x26\xb1\xf2\x9d\xc6\xb1\x5e\x82\xdb\xfd\x00\x39\xf6\x1e\x0f\xd5\x4c\xba\xc5\x91\x72\x13\x3e\xd2\xbd\xa7\x77\x1c\x9f\xd1\xfe\xa6\xe1\xa0\xe8\x2a\x12\x65\x86\xbd\xf4\x3f\xda\x99\x78\x69\xb4\x3d\x7c\x84\x7b\xb7\x72\xdb\x4f\x17\xe2\xf6\xf1\x1c\x6a\xe0\x9d\xe0\xd6\xbf\xfc\x0b\x00\x00\xff\xff\x58\xbc\xd1\x27\x43\x03\x00\x00")

func templateHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateHeaderHtml,
		"template/header.html",
	)
}

func templateHeaderHtml() (*asset, error) {
	bytes, err := templateHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/header.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHelpHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x94\xc1\x8e\xd3\x30\x10\x86\xef\x7d\x0a\xe3\x33\xb5\x09\x2b\x21\xb4\x72\x72\x61\x41\x70\x82\x03\x42\xe2\xe8\x3a\xd3\xda\xc5\xb1\x83\x67\x9a\x6e\x15\xf5\xdd\x91\xeb\xa4\x2c\xd5\x82\x40\xa2\xda\x53\x3c\xbf\xc7\xdf\xcc\x9f\x91\xad\x9e\xdd\x7d\x7c\xf3\xf9\xeb\xa7\xb7\xcc\x52\xe7\x9b\x85\x2a\x1f\xc6\x94\x05\xdd\xe6\x05\x63\x8a\x1c\x79\x68\x36\x69\x17\x88\x59\xf0\xbd\x92\x45\x29\xbb\x1d\x90\x66\x41\x77\x50\xf3\xc1\xc1\xbe\x8f\x89\x38\x33\x31\x10\x04\xaa\xf9\xde\xb5\x64\xeb\x16\x06\x67\x60\x79\x0a\x9e\x33\x17\x1c\x39\xed\x97\x68\xb4\x87\xba\xe2\x13\xc8\xbb\xf0\x8d\x25\xf0\x35\x47\x3a\x78\x40\x0b\x40\x9c\xd9\x04\xeb\x9a\x5b\xa2\xfe\x56\xca\x4e\xdf\x9b\x36\x88\x55\x8c\x84\x94\x74\x9f\x03\x13\x3b\x79\x16\xe4\x8d\xb8\x11\xaf\xa4\x41\xfc\xa9\x89\xce\x05\x61\x10\xe7\x3a\x68\x92\xeb\x89\x61\x32\x85\x8b\xb7\x52\xea\xad\xbe\x17\x9b\x18\x37\x1e\x74\xef\xf0\x04\xcd\x9a\xf4\x6e\x85\x72\xfb\x7d\x07\xe9\x20\x2b\x51\xbd\x14\x2f\xa6\xe8\x44\xdd\x22\x6f\x94\x2c\xc0\xdf\xd0\xff\xa1\xeb\xed\x65\xd3\x97\x78\x25\xe7\xa9\xa8\x55\x6c\x0f\xa5\xe2\x38\x32\x82\xae\xf7\x9a\x80\xf1\x79\x75\x4a\x84\x24\xf2\x38\x39\x13\xec\x78\x2c\xdd\xb5\x6e\x60\xc6\x6b\xc4\x9a\xe7\x11\x69\x17\x20\x4d\xff\x25\xcf\xbc\x6a\xbe\x40\x42\x17\x03\xfb\x10\xd6\x31\x75\x9a\x5c\x0c\x4a\xda\xea\x9c\xf2\x00\x90\xe2\xfe\x7c\xf4\x12\xed\x97\xd8\x2d\x2b\xde\x28\xec\x75\x98\xe5\x7e\xe7\xfd\x32\xb9\x8d\xa5\xbc\x41\x29\x86\xcd\x5c\x4f\xc9\x29\x56\x32\x9f\x68\x94\x6c\xdd\xf0\x47\xf8\xeb\xc7\xe0\x1e\xd6\xc4\x9b\x71\x14\x43\xc1\x8a\x09\x7f\x3c\x3e\xc6\xfd\x35\xf8\xdf\xce\xde\xed\xbc\xbf\xb2\xbb\x07\x25\x9e\xc2\xe1\x9d\x26\xb8\x96\xb5\xcc\x7e\x0a\x4f\xef\x35\xda\x6b\x79\xca\xec\xbf\xf0\x34\x7d\xc6\x91\x89\xfc\xda\x9e\xef\xee\x9c\xa3\x64\xb9\xfc\x4a\x96\xc7\x7a\xb1\xf8\x11\x00\x00\xff\xff\x73\x1c\x34\xc5\xc6\x05\x00\x00")

func templateHelpHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateHelpHtml,
		"template/help.html",
	)
}

func templateHelpHtml() (*asset, error) {
	bytes, err := templateHelpHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/help.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateJobHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x96\x51\x6f\xdb\xb8\x0f\xc0\xdf\xf7\x29\xf8\x37\xfa\xf0\x3f\x60\xb1\xd6\xeb\xe1\x30\x64\xb2\x5f\xb6\x1e\xb0\x61\x77\x2d\xd0\xed\xe1\xfa\x26\x5b\x4c\xac\x54\x96\x7c\x12\x9d\x36\x33\xfc\xdd\x0f\x92\x9d\x26\x75\xb7\x5d\x1a\x20\x2f\x89\x48\x51\xe4\xcf\x24\x45\x9b\xff\xef\xc3\xd5\xfb\x2f\x7f\x5f\x5f\x42\x45\xb5\xce\x5f\xf1\xe1\x0f\x80\x57\x28\x64\x58\x00\x70\x52\xa4\x31\x5f\xba\xd6\x10\x74\x5d\xba\xb2\x45\xfa\xf5\xeb\xc7\x0f\x7d\xcf\xd9\xb0\x35\x98\xd5\x48\x02\xca\x4a\x38\x8f\x94\x25\x2d\x2d\x66\x6f\x93\xfd\x2d\x23\x6a\xcc\x92\xb5\xc2\xfb\xc6\x3a\x4a\xa0\xb4\x86\xd0\x50\x96\xdc\x2b\x49\x55\x26\x71\xad\x4a\x9c\x45\xe1\x35\x28\xa3\x48\x09\x3d\xf3\xa5\xd0\x98\x9d\x6f\x1d\x69\x65\xee\xc0\xa1\xce\x12\x4f\x1b\x8d\xbe\x42\xa4\x04\x2a\x87\x8b\x2c\xa9\x88\x9a\x39\x63\xb5\x78\x28\xa5\x49\x0b\x6b\xc9\x93\x13\x4d\x10\x4a\x5b\xb3\x47\x05\xbb\x48\x2f\xd2\xdf\x59\xe9\xfd\x4e\x97\xd6\xca\xa4\xa5\xf7\xdb\x38\xbe\x74\xaa\x21\xf0\xae\x1c\xfc\xfa\x39\x63\x62\x25\x1e\xd2\xa5\xb5\x4b\x8d\xa2\x51\x3e\x3a\x0d\x3a\xa6\x55\xe1\xd9\xea\x9f\x16\xdd\x86\x9d\xa7\xe7\xbf\xa6\x6f\x46\x29\x7a\x5d\xf9\x24\xe7\x6c\x70\xf8\x03\xef\x2f\xa0\x5e\x4d\xa1\xa7\xee\x39\xdb\x56\x8e\x17\x56\x6e\x86\x88\x5d\x07\x84\x75\xa3\x05\x21\x24\xdb\x55\x34\x44\x97\x86\x92\x27\x90\x42\xdf\xbf\x1a\xf0\xa4\x5a\x43\xa9\x85\xf7\x59\x12\x6a\x24\x94\x41\x37\x26\x26\x34\xc6\x45\xfe\xc9\x16\x20\x91\x84\xd2\xb0\xb0\x0e\xb8\x18\x2b\xc0\x3c\xba\x50\x44\x36\x76\xc9\xa5\x91\xd7\x56\x19\xea\xfb\x24\x7f\xa6\xe2\x4c\xe4\xf0\xff\x27\xfd\xf4\x0b\x67\xd5\xc5\x36\x50\xd7\xc1\xbd\xa2\x0a\xc2\x7e\x60\x1b\xc3\xef\xc1\x39\x7b\xff\x88\x35\xc5\xd6\x33\x5f\xcf\x7e\x4b\xf2\x1b\x12\xd4\x7a\xce\xa4\x5a\xff\xd4\xf4\x6d\x24\x1c\xac\x03\xdb\x9e\xfd\x13\xe1\x78\x0c\x47\x40\xaa\xc6\x03\x51\xaa\xb6\x16\x46\x7d\xc3\x2f\xaa\x46\x48\xe3\xf1\xb0\x3c\x01\xda\xa5\x91\x2f\x01\x53\x0b\x30\x96\x20\x14\x32\x00\xa5\x1f\xfd\x2d\x3a\x0b\xd0\xf7\x30\xa5\x1e\x4d\xfa\xbe\xeb\xd0\xc8\x13\xa0\x87\xae\x39\xb4\xb4\xdb\x89\xf5\x1c\xe1\xc8\xe0\xef\x6d\x5d\x0b\x23\x41\x2b\x73\x68\xee\x9c\x30\x4b\x84\x74\x3c\xf9\x59\x99\x98\x9b\x34\xa6\xee\x34\x19\xba\x0e\xd3\xf8\x18\xc6\xe1\xe0\xcb\x48\xff\x9b\x91\x44\xa1\x71\xbb\x37\x08\xf1\x77\xe6\xc9\xa9\x06\xe5\x9e\x6d\xb0\xde\xbd\x83\x76\x3a\xf7\x54\x11\xcd\xf2\xab\x96\x9a\x96\x60\xa1\x34\x7a\xce\xa8\x9a\x1c\x62\x4f\x4f\x05\x8b\x89\x67\x4e\xbb\x61\xf9\xd3\x58\x32\xdf\x4d\x3b\x87\x9e\xd8\xca\x16\xec\xb1\xbd\x92\xfc\xd3\xcd\xd5\x5f\xe0\xc7\xa1\x23\x72\xce\x68\xfa\x04\x6c\xea\xb6\xeb\xce\xda\x56\x49\x98\x67\x30\xba\x79\x86\xf1\xc3\xb8\xf1\x64\xdf\xb3\x6f\xaa\x49\xf2\x5b\xd5\xc4\x14\x80\x5d\x80\xd0\x1a\x94\x69\x5a\xf2\x10\x9a\xd4\xc6\x04\xed\x90\xbe\x47\x31\x54\xfe\xec\x0e\x37\xaf\xe1\x6c\x2d\x74\x8b\x11\xe9\x0f\xa5\xf1\x4f\xd1\x7c\x87\xea\xd0\xe4\x6c\x21\x03\x5b\x10\xef\x70\x33\xbc\x11\x86\xd5\x61\x39\x8a\x5d\x77\x18\xf1\xad\x6a\x4e\x0c\x7c\x68\x61\xa7\xd0\x9c\x4d\xfa\x8c\xb3\xd8\xff\x47\x5e\xf9\xe7\xd7\xe9\xd8\x0b\xf4\xd9\x2e\x4f\x7b\x6f\xaa\x9c\x37\x0e\x21\x7e\xb5\x65\x49\x21\xca\xbb\xa5\xb3\xad\x91\xb3\xd2\x6a\xeb\xe6\x40\x4e\x18\xdf\x08\x87\x86\xde\x41\x61\x9d\x44\x37\x87\x37\xcd\xc3\xbb\x46\x48\xa9\xcc\x32\x0a\x71\x90\x0f\x77\x3d\xbd\x21\xa7\xcc\x32\x14\xa3\x71\x98\x1f\x04\xff\xe2\xd4\x8f\x05\xdc\xd3\x3d\x5a\x71\x36\x78\xe3\x6c\xf8\x62\xfe\x37\x00\x00\xff\xff\x92\x9c\xab\x74\x49\x0b\x00\x00")

func templateJobHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateJobHtml,
		"template/job.html",
	)
}

func templateJobHtml() (*asset, error) {
	bytes, err := templateJobHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/job.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateJobsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x41\x6f\xdb\x3a\x0c\xbe\xe7\x57\xf0\xe9\xfc\x22\xbd\xbc\x02\xc3\x50\xc8\xbe\xb4\x3d\x74\x18\xb0\x02\x6b\x0f\xdb\x4d\xb1\x98\x58\x99\x2c\x79\x12\x9d\x36\x33\xfc\xdf\x07\x59\x76\x9a\xb6\xe9\x80\xe5\xe0\x88\xe4\xa7\x8f\x34\x3f\xd2\xf2\x9f\xeb\x2f\x57\xf7\xdf\xee\x6e\xa0\xa6\xc6\x96\x0b\x99\xff\x00\x64\x8d\x4a\xa7\x03\x80\x24\x43\x16\xcb\x6d\xe8\x1c\xc1\xce\xaf\xa3\x14\xd9\x93\xa3\x0d\x92\x82\xaa\x56\x21\x22\x15\xac\xa3\xcd\xf2\x23\x3b\x0d\x39\xd5\x60\xc1\xf6\x06\x1f\x5b\x1f\x88\x41\xe5\x1d\xa1\xa3\x82\x3d\x1a\x4d\x75\xa1\x71\x6f\x2a\x5c\x8e\xc6\xbf\x60\x9c\x21\xa3\xec\x32\x56\xca\x62\xb1\x9a\x89\xac\x71\x3f\x20\xa0\x2d\x58\xa4\x83\xc5\x58\x23\x12\x83\x3a\xe0\xa6\x60\x35\x51\x7b\x29\x44\xa3\x9e\x2a\xed\xf8\xda\x7b\x8a\x14\x54\x9b\x8c\xca\x37\xe2\xe8\x10\x17\xfc\x82\x7f\x10\x55\x8c\xcf\x3e\xde\x18\xc7\xab\x18\xe7\x3c\xb1\x0a\xa6\x25\x88\xa1\xca\xbc\xf1\x52\x08\xb5\x53\x4f\x7c\xeb\xfd\xd6\xa2\x6a\x4d\x1c\x49\x93\x4f\x58\xb3\x8e\x62\xf7\xb3\xc3\x70\x10\x2b\xbe\xfa\x9f\xff\x37\x59\x23\xeb\x2e\xb2\x52\x8a\x4c\xf8\x0e\xfb\x5f\x54\xbd\x7b\x5d\xf4\x6b\x7a\x29\x66\xc1\xe4\xda\xeb\x43\xce\xd8\xf7\x40\xd8\xb4\x56\x11\x02\x9b\x4f\x23\x10\x03\x4f\x4a\x33\xe0\x30\x0c\x8b\x5c\x9e\x36\x7b\xa8\xac\x8a\xb1\x60\x49\x23\x65\x1c\x86\xa9\x31\x69\x1e\x56\xe5\xa7\x51\xfb\x7a\x55\x2e\x26\xe7\x55\x17\x02\x3a\xb2\x07\xe8\x7b\x8b\x0e\x78\x9a\x8e\x61\x18\x87\x04\x54\x04\xbf\x49\x25\x38\xff\x98\x92\xcc\x3c\x41\x1c\x39\x49\xad\x2d\xce\x39\xb3\x31\x3e\x97\x91\x82\x69\x51\x1f\xb3\x27\xec\xf3\x40\xce\x9e\x70\x6a\x8e\x90\xf2\xe1\xe1\xf6\x5a\x0a\xaa\xdf\x46\x2a\xdf\x34\xca\x69\xb0\xc6\xe1\x79\x44\x24\x15\x08\xc8\x34\xef\xc7\xa9\x8b\xe7\x63\xe8\xf4\xd9\x9b\x52\x9c\x56\x99\xa2\x2f\xde\x42\xd2\xb3\x58\xf9\xd7\xf7\x41\xb9\x2d\xce\xad\xfc\xf3\xfb\xea\x52\xaa\x69\x0b\xc4\xce\xaf\x45\xdf\xf3\xd4\x80\x61\x60\xe5\xf1\x28\x85\x2a\xa5\x20\xfd\xf6\x6e\xd2\x66\x4a\x76\x97\xb6\x57\x5f\xe5\x16\x7d\x36\x0e\x87\x01\xfa\x9e\x8f\x4f\x74\x7a\x18\xe0\x3c\x45\xdf\xd7\x5d\xa3\x9c\xf9\x85\xf7\xa6\x41\xe0\x5f\x53\x0b\xd3\x31\xe5\x3d\x7f\x21\x61\xa8\x8b\xef\x03\xcc\x06\x9c\x27\xe0\x37\x4e\x27\x26\x7e\x1b\xbf\x63\xf0\x00\x63\x31\x2f\xd3\x4d\x90\x61\x98\xaa\x7c\x4d\x99\xbb\xff\xa2\xbb\x23\xee\x54\x90\x53\x01\xa4\x18\xc7\x6f\x5a\x57\xa1\xcd\x3e\xaf\x56\xc6\x48\x91\x3f\x8e\x8b\xc5\xef\x00\x00\x00\xff\xff\xe1\xe3\x48\xa3\x36\x05\x00\x00")

func templateJobsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateJobsHtml,
		"template/jobs.html",
	)
}

func templateJobsHtml() (*asset, error) {
	bytes, err := templateJobsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/jobs.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateServiceHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\x7f\x6f\xdb\xba\x15\xfd\xbf\x9f\xe2\x8e\x2b\x60\x67\x89\xa9\xa4\xc9\xeb\xba\x56\x36\xd6\x36\xee\xd6\xa1\xaf\x2d\xd0\x02\xdb\x1e\x06\x0c\xb4\x78\x6d\x31\xa5\x48\x8d\xa4\xec\xf8\x79\xfe\xee\x03\x49\xc9\x96\x6c\xa7\x4d\x8a\x25\x7b\xd8\x96\x3f\x1c\x89\x3f\x0e\x0f\x2f\xcf\xbd\x57\xba\x4a\x7f\x75\xf9\xe1\xf5\xe7\xbf\x7e\x1c\x43\xee\x0a\x39\x7a\x94\xc6\x7f\x00\x69\x8e\x8c\xfb\x0b\x80\xd4\x09\x27\x71\x34\x33\x95\x72\xb0\x5a\x51\x8b\x66\x2e\x32\xa4\x63\xc5\x3f\x6a\xa1\xdc\x7a\x9d\x26\x71\x48\x1c\x5e\xa0\x63\x90\xe5\xcc\x58\x74\x43\x52\xb9\xe9\xe0\x19\x69\x77\x29\x56\xe0\x90\xcc\x05\x2e\x4a\x6d\x1c\x81\x4c\x2b\x87\xca\x0d\xc9\x42\x70\x97\x0f\x39\x7a\xf4\x41\xb8\x39\x01\xa1\x84\x13\x4c\x0e\x6c\xc6\x24\x0e\xcf\x1a\x20\x29\xd4\x17\x30\x28\x87\xc4\xba\xa5\x44\x9b\x23\x3a\x02\xb9\xc1\xe9\x90\xe4\xce\x95\xcf\x93\xa4\x60\xd7\x19\x57\x74\xa2\xb5\xb3\xce\xb0\xd2\xdf\x64\xba\x48\x36\x0d\xc9\x39\x3d\xa7\x4f\x93\xcc\xda\x6d\x1b\x2d\x84\xa2\x99\xb5\xcd\x3a\x36\x33\xa2\x74\x60\x4d\x16\x71\xed\xf3\x24\x61\x57\xec\x9a\xce\xb4\x9e\x49\x64\xa5\xb0\x01\xd4\xb7\x25\x52\x4c\x6c\x72\xf5\x8f\x0a\xcd\x32\x39\xa3\x67\x4f\xe8\x69\x7d\x17\x50\xaf\x2c\x19\xa5\x49\x04\xbc\x01\xfd\x0e\xac\xaf\x76\x49\xdf\x02\xde\x93\xaf\x54\xf9\x65\x16\x29\x5f\x0b\x6d\x13\x2e\xac\x8b\x97\x07\x51\xd2\xa4\xd1\x41\x3a\xd1\x7c\x19\x81\x57\x2b\x70\x58\x94\x92\x39\x04\xd2\x5c\x85\x81\x68\xa8\x17\x10\x01\x0a\xeb\xf5\xa3\x66\xf0\xe3\x0c\x9e\x0f\x81\x66\x5a\x4d\xc5\xcc\x77\xd4\xed\x0b\xe1\x72\x68\xe4\xd4\xb4\xa7\x5c\xcc\x21\x93\xcc\xda\x21\xf1\xca\x60\x42\xa1\xa9\x8f\xa3\xdb\x6b\xf4\x62\xd3\xee\x05\x7b\x36\x5a\xad\x3a\xa2\xcc\xcf\x36\xd3\x12\x2e\xe6\xb7\xc0\xe8\xac\x2d\x07\xb6\x18\x5c\x90\x11\x2a\x5e\x7a\xc8\x0e\xc8\xc1\xc1\xcf\xc8\x2e\x85\xf6\xb2\xf1\xe6\x3b\x49\x64\xba\x28\x98\xe2\x20\x85\xc2\x5b\x12\x31\x4c\xcd\x10\xe8\xeb\x38\xf3\x9d\x50\xb8\x5e\xaf\x56\x74\xbd\x86\xd5\x0a\x15\x3f\x4c\x2f\xde\x7c\x27\x49\x8e\x51\x39\x42\xab\x5b\x72\x84\x82\x99\x2f\x5c\x2f\x14\xd0\xcb\xed\x64\xf8\x5e\xd3\xe5\xe7\xa3\x4f\x8e\x19\x07\x8d\xa8\x82\xc4\xd2\x4c\x73\x1c\x65\x95\x91\x69\x12\x2e\xd3\x24\x3f\xdf\xce\xf2\x0a\xe5\x41\xa1\x97\x38\x65\x95\x74\xb6\xd1\xe2\xee\x6a\x0b\x94\x92\x80\xe0\x43\xe2\xc1\x06\xf5\x99\xb4\x09\x7c\x85\x75\xed\x8d\x6e\x59\xe2\x90\x38\xbc\x76\xc9\x15\x9b\xb3\xd8\xda\x82\xd8\x5c\xcc\x99\x01\x07\x43\xe0\x3a\xab\x0a\x54\x8e\xce\xd0\x8d\x25\xfa\xcb\x57\xcb\xb7\xbc\xdf\x6b\x73\xe8\x1d\xbd\xd8\x4c\x74\x54\x28\x85\xe6\x8f\x9f\x7f\x7c\x07\x43\x08\x54\x61\xf0\x17\xf8\xf8\xe1\xd3\x67\xbf\xd7\x28\x8b\xc7\x65\xd8\xf1\x47\x66\x58\x81\x0e\x8d\x5d\xaf\x61\x30\x98\x6a\x53\x04\x7b\x94\xb0\x5e\x0f\xff\x46\x56\x2b\xa1\x38\x5e\x7b\xfb\x3c\x2e\xd7\x6b\xdf\x10\x94\x43\xe0\x78\xb3\x1c\xd9\xc5\x7c\xab\xca\xca\xbd\x11\x12\xbd\x1d\xb7\xa0\x1e\x60\xf8\xfb\x37\x6f\xdf\x8d\xdf\xbf\xfc\x71\x0c\xb7\x41\xfa\x50\xb9\x9b\xa1\x74\xe8\xa4\x77\x02\x0c\xd4\x7e\x12\xe5\x57\x88\xd1\x9f\x45\xd9\xc2\x82\x6f\xb1\x3b\x88\x56\x73\xeb\x42\xd5\x48\x04\x3c\xec\x42\x28\xae\x17\x54\xea\x8c\x79\xc5\xd3\x5c\x5b\xe7\x13\x23\x1c\x03\x79\x7e\x68\x80\xcf\x95\xbe\x33\x31\x68\x5d\x52\xeb\x3b\xe9\x84\x1b\xf2\x62\x23\xb6\x4d\x08\xbf\xb5\x43\xef\xb9\x8e\x50\x0e\x0d\xcb\x9c\x98\xa3\x5c\x76\x3d\x26\x0d\x7b\x8d\x79\xbc\x1e\x4e\xa0\x40\x97\x6b\x3e\x24\xa5\xb6\x8e\x00\xaa\x2c\x2a\xbd\xa8\xa4\x13\x25\x33\x2e\xf1\x93\x06\x9c\x39\xd6\x5a\x16\x82\xc5\x1a\x11\xfe\xbd\x15\x40\x6c\x57\x9f\xad\xe8\x60\x5b\xde\x19\xbc\x57\x4c\xdb\x42\x86\x4e\x77\x7b\xc7\x25\x53\x28\x21\xfc\x0e\x78\x74\xf5\x0e\x95\x03\xa3\x07\x3e\xab\x09\x35\xdb\x19\x07\xf0\xba\x15\x8f\xa1\xdc\x2e\x3e\xd5\xa6\x8e\x37\x3b\x99\x20\xb4\x51\x80\xcf\xcb\x52\x64\x4c\xca\x25\xb8\x1c\x2d\x02\x33\x08\xd6\x19\xa1\x66\x16\xb4\x01\x55\x15\x13\x34\x96\x76\x69\x75\x83\xe9\x61\xa6\x3e\x3f\xef\xd1\xfc\x9a\xbf\xef\x0c\x6d\x23\x86\xa3\x9a\x19\x5d\x95\x7b\x88\xfe\xe1\x8b\x4d\x50\xfa\x9d\x0e\x49\xd4\xbb\x8f\xe4\xfe\x3f\xa4\xb6\x64\xaa\x01\xf1\x31\x6e\x50\x54\x0e\x79\x88\xf4\x75\x24\xb9\xe1\xb0\x1f\x97\xf0\xcf\x6d\x32\xf0\x06\xf3\x50\xa3\x34\x09\x8b\x1d\x20\x21\xbc\x2b\x77\xf8\xfa\xa7\x05\xa3\xeb\x00\x5d\x13\x83\x52\xb2\x0c\x73\x2d\x39\x06\xb6\x9d\x70\x46\x5a\xc1\x98\xd4\x72\x6e\x36\xb4\x6b\x9c\xfd\x13\x80\xc6\xb5\xbf\x7e\x54\x7b\x0d\xcd\xac\x7d\x0d\x77\x02\xe7\x03\x68\x38\x2e\xa5\x10\x39\x72\x70\xba\xa3\x5d\xd8\x88\x17\x3a\xea\xdd\x68\x56\x28\x2e\xe6\x82\x57\x4c\xc2\x34\xe0\xf4\x95\x76\xe0\x23\x5e\xb8\x3d\xba\x2f\x05\xdf\x64\xa4\x5d\xc8\x7b\x90\xf0\x7f\x46\xc1\x51\xa3\xde\xa8\xbf\x18\x8d\xc6\x9c\xf7\x00\x0a\xfd\xa9\x91\x13\xd4\xaf\x02\x42\xcd\x80\x0b\x83\x99\xd3\x46\xdc\x59\xbc\x4d\xe8\x3d\x69\xc5\xde\x9f\x0f\x2d\xc1\xc0\x0a\x35\x93\xb8\x59\x6b\x49\x01\xfe\x10\x5e\x80\xf1\xba\x64\x8a\x5b\x8f\xb0\x99\xeb\xd7\xcf\x0c\xfa\xf7\x21\xa6\x20\x9e\xeb\x66\xe6\xb7\x52\xc2\x7d\xfa\xc9\xde\x41\xed\x02\xfe\xdf\x4b\x3a\x7a\xff\xea\xc0\x1b\xbd\x64\xdb\xb2\xef\x2f\xdd\x47\xd8\x07\x0a\xea\xc1\x02\x41\x77\xb5\xb2\x83\x36\x39\x4c\x96\xff\xbe\xf8\x0e\xfe\xe9\xc7\xe6\xba\x92\x1c\x0c\x4e\x25\x66\x0e\x98\x5a\x02\x5e\x3b\x54\x36\x9c\xb5\xcb\x99\x8b\x58\x85\x7f\x7a\x65\xca\x79\x47\xf1\x8e\xd3\x94\x90\xee\x49\xfb\x37\x1a\x7d\x17\xf3\xbf\x4c\xfe\xbf\x94\x07\x99\xf6\x9b\xd1\x03\x48\xfe\xbd\x57\xbb\x9e\x02\x6b\x05\xdd\x03\x92\x3f\xfc\x38\x9e\x23\xc4\xb7\x35\x58\x08\x29\x61\x82\xc0\x36\x69\xc7\x83\x7a\x73\x37\x49\x61\x0b\xaf\xa7\xb5\x57\x94\x46\xf3\x2a\xbb\x83\x6f\xed\xe5\x9b\x03\xc9\xa6\x9d\x8a\x6a\x72\x7a\x0a\x9d\x1d\xdc\xaf\xeb\xfc\xaf\xe5\x8d\x87\x76\x1c\x40\xc5\xa1\xeb\x3a\x69\x39\x4a\x27\x95\x73\x5a\xd5\x9c\x6c\x35\x29\x84\x23\xcd\x16\x26\x4e\xc1\xc4\xa9\xad\xb3\x7c\x0a\xfd\x69\x12\x27\xb5\x6b\x50\x7e\xb7\xb7\xaa\x7c\x06\x4b\x44\x81\x0d\x9e\x9d\xfd\xf6\xfc\xec\xf4\xd5\xe5\xe0\xe2\xc9\xcb\xa7\x83\x8b\xcb\xd7\x17\x83\x97\x17\x3f\xbc\x1c\xfc\xee\xfc\xc9\xf8\xd5\x0f\x4f\xce\xce\xc7\x17\x63\x92\xd4\x95\xe5\x2d\x68\x27\x08\xdc\xa6\xc6\x15\x7e\xe6\xcc\x40\xa8\x21\xb4\xca\x5b\xfe\xde\x52\x7f\x06\xfc\xad\xc3\xa2\xbf\xa9\x2c\xd4\xa5\x2d\xdf\x4f\x19\xe7\xe3\x39\x2a\xf7\x4e\x58\x87\x0a\x4d\xbf\x17\xcd\xd4\x3b\x81\x69\xa5\x32\xaf\x95\x3e\xce\x8f\x60\xd5\x98\xd6\xaf\xa4\xa3\xa8\xdb\x8b\x85\xb2\xfc\x27\x94\xc1\xdf\xfa\xe4\xd7\x77\x31\xc2\xd1\x49\xeb\xd8\xf4\x25\x73\x0c\x86\xa0\x70\x01\x6f\xb4\x29\xfc\x6d\xdf\x53\xdd\x14\xe4\x92\x04\xfe\xcc\x84\x03\x06\xd3\x4a\x4a\x28\x84\xaa\x5c\x4c\xce\x4e\x14\xa8\x2b\x57\x8f\x8b\x45\xf8\xfa\x78\x2d\xad\x3b\x61\x08\x4f\x4f\xe1\x37\x70\x76\x7a\x7a\xda\x20\xd6\xfb\xe9\x94\xf9\x7a\xe9\xc4\x24\xa3\xf6\x01\x33\x89\xc6\x41\xf8\x1d\xd8\x2a\xcb\xd0\x5a\x12\x4b\x3c\x3e\xac\xd4\xc6\x3d\x81\x52\x22\xb3\x08\x0b\x4f\xd1\x93\xaa\x4a\xa9\x19\xa7\x94\xc6\x43\xee\xbd\xe8\x56\x90\x22\xcb\x52\x5b\xd7\xdf\x2f\x45\xed\x7f\x19\x22\x27\xd1\x42\x47\x6d\x17\xa1\x2e\x47\xd5\xdf\x9c\x97\x41\x5b\x6a\x65\xd1\x9f\x5a\xc7\xbb\x32\xad\xac\x96\x48\xa5\x9e\x6d\x07\xbd\xe8\x8e\x39\x60\x8b\xdd\x58\x70\x5b\xd3\xd4\x75\x2f\xeb\x4d\x84\x1c\x2c\x22\xa4\xac\xfe\xa6\x94\x5c\xe9\x49\xd2\x83\x63\x68\x78\x50\xce\x1c\xa3\x55\x25\x38\x1c\x43\x8f\x8c\xae\xf4\xc4\xcf\x74\x95\x4d\x13\x36\xaa\x6d\xd7\x2a\x45\xd6\x7f\x24\x2d\x0d\x8e\x08\x1c\xc3\x9f\x3e\x7d\x78\x4f\x63\xe1\x47\x4c\x97\xfd\x0e\xee\x89\xaa\xa4\x3c\xb9\x38\x82\x63\x20\x69\x12\x66\x74\xb6\xbd\xee\x9a\x33\x63\x2e\xcb\xb7\xf6\x44\x63\xb4\x39\x5a\x7d\xd3\x4e\x40\xd2\xfc\x7c\x34\xf6\xa3\x43\x79\x2f\x98\x89\xec\x73\xde\xff\xeb\xdd\x64\x4c\xa1\xa6\x9a\x1c\xda\xf7\xfe\x5f\x60\xe9\x6d\x17\x6d\x75\x13\xe2\x82\x19\x15\x72\xbe\x37\x7e\x98\x43\x3b\xa6\xda\x22\xf4\x1e\x45\xd3\x44\x4b\xe1\x9c\x96\x06\x7d\xa8\xa8\x8b\xfa\xfd\xba\x63\x7d\x02\x53\x26\x37\x42\xea\x7e\xec\x8a\xdf\xb8\xd2\x24\x7e\x05\xfd\x57\x00\x00\x00\xff\xff\xed\xfb\x95\x06\x1d\x1d\x00\x00")

func templateServiceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateServiceHtml,
		"template/service.html",
	)
}

func templateServiceHtml() (*asset, error) {
	bytes, err := templateServiceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/service.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateServicesHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xcd\x6e\xdb\x3c\x10\xbc\xe7\x29\xf6\x23\x72\x4c\xc8\xcf\x0d\xd0\x43\x40\xe9\x92\xe4\x56\xa0\x01\xda\x4b\x8f\xb4\xb8\xb1\xe8\x50\xa4\x4a\xae\x1d\x1b\x82\xde\xbd\xa0\x28\xc9\xbf\x29\x50\x1f\x6c\xee\xee\x70\x38\xdc\x59\x5a\xfe\xf7\xfc\xfd\xe9\xe7\xaf\xd7\x17\xa8\xa9\xb1\xe5\x8d\xcc\x3f\x00\xb2\x46\xa5\xd3\x02\x40\x92\x21\x8b\xe5\x2a\x6c\x1c\x41\xc4\xb0\x35\x15\x46\x29\x72\x36\x23\x1a\x24\x05\x4e\x35\x58\xb0\xad\xc1\x8f\xd6\x07\x62\x50\x79\x47\xe8\xa8\x60\x1f\x46\x53\x5d\x68\x4c\x1b\xef\x87\xe0\x0e\x8c\x33\x64\x94\xbd\x8f\x95\xb2\x58\x2c\xd8\x48\x64\x8d\x7b\x87\x80\xb6\x60\x91\xf6\x16\x63\x8d\x48\x0c\xea\x80\x6f\x05\xab\x89\xda\x47\x21\x1a\xb5\xab\xb4\xe3\x4b\xef\x29\x52\x50\x6d\x0a\x2a\xdf\x88\x39\x21\x1e\xf8\x03\xff\x2a\xaa\x18\x0f\x39\xde\x18\xc7\xab\x18\xa7\x73\x62\x15\x4c\x4b\x10\x43\x95\x79\xe3\xa3\x10\x6a\xad\x76\x7c\xe5\xfd\xca\xa2\x6a\x4d\x1c\x48\x53\x4e\x58\xb3\x8c\x62\xfd\x7b\x83\x61\x2f\x16\x7c\xf1\x85\xff\x3f\x46\x03\xeb\x3a\xb2\x52\x8a\x4c\xf8\x09\xfb\x3f\xa8\x5e\x9f\x8b\x3e\xa7\x97\x62\x72\x46\x2e\xbd\xde\xe7\x13\xbb\x0e\x08\x9b\xd6\x2a\x42\x60\xd3\x6a\x00\x62\xe0\xc9\x52\x06\x1c\xfa\x7e\xc0\x66\x89\xda\x6c\xa1\xb2\x2a\xc6\x82\x25\x9f\x94\x71\x18\xc6\xe6\x24\xf3\x17\xe5\x8f\xd9\xe8\x7a\x51\xde\x8c\x85\xa7\x4d\x08\xe8\xc8\xee\xa1\xeb\x2c\x3a\xe0\xd3\x38\xf4\xfd\x3c\x19\xa0\xb6\xca\x58\xb5\xb4\x38\xb3\x05\x31\x33\x53\x2a\x4c\x27\xe7\x60\xf8\xbe\x8f\x14\x4c\x8b\x7a\xd6\x90\xb0\x87\x19\x9c\x32\xe1\x38\x1c\x20\x25\x3a\xdd\x7a\xe3\x48\x0a\xaa\x2f\xab\x95\x6f\x1a\xe5\x34\x58\xe3\xf0\x3a\x42\x63\x6e\xae\xf1\xee\x33\xc0\x9b\xda\x58\x8a\xe7\x55\x29\x8e\xe5\xa4\xea\x20\xf7\x48\xff\xc1\xa0\xfc\xe9\xba\xa0\xdc\x0a\x8f\xdb\xf6\xf7\xdb\xe9\x52\xaa\x71\xfa\xc7\x2d\xa2\xeb\xf8\x8b\xd3\xaf\xe9\xc6\x7d\xcf\xca\x93\x50\x0a\x55\x4a\x41\xfa\x92\xe6\x24\x31\xcc\x4b\x56\x72\x6b\x9c\xc6\xdd\x1d\xdc\xa2\xc5\x06\x1d\xc1\x63\x01\xfc\x29\xf7\xec\x9b\x71\x78\x22\x30\xef\x9c\xa0\x57\x4a\xe8\xf4\x59\xf6\xba\x9a\xae\x6b\x54\x78\xd7\xfe\xc3\x01\x7f\x3e\xb4\x3f\x5d\xe0\x3a\x7c\x1d\xfd\x00\xcd\x46\x5c\xe2\x4e\xad\x18\x67\xfc\xba\x2a\x29\x4e\x6c\x91\x62\x18\xbf\xf1\xe1\x0a\x6d\xb6\xf9\x91\x65\x8c\x14\xf9\xff\xf0\x4f\x00\x00\x00\xff\xff\x4b\xc3\x31\x0c\x27\x05\x00\x00")

func templateServicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateServicesHtml,
		"template/services.html",
	)
}

func templateServicesHtml() (*asset, error) {
	bytes, err := templateServicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/services.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readmeMdReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x6d\x73\xdb\xc6\x11\xfe\x8e\x5f\xb1\x13\x76\xa6\x52\x46\x20\x25\x8f\x1a\xd9\x1a\x2b\x13\x5b\x71\x6c\x75\x6c\x37\xb5\x94\xbe\x4c\xa7\x2d\x0e\xb8\x05\x70\xd2\xe1\x16\xbe\x17\x52\x74\x98\xfe\xf6\xce\x1e\x00\x12\x14\x2d\x59\xd3\xe6\x43\xf8\x81\xa2\xee\x70\xbb\xcf\x3e\xfb\xdc\xee\x62\x02\xaf\x6d\x30\x3e\x49\xe2\x1f\x50\x0e\x04\xbc\x26\x70\x68\xe7\x68\xc1\xd7\xc2\x03\xde\xb6\xe4\x90\x37\x3e\xbc\xba\xbc\x02\x65\x3c\xda\x52\x14\x08\x9e\xa0\xa0\xa6\x11\x46\x82\x56\x06\xa1\xb5\x54\x59\xd1\xb8\x29\xc0\xda\x5a\x41\xa6\x54\x55\xb0\x28\xc1\xd7\x96\x42\x55\x83\x00\xa7\x9a\x56\x23\xfc\xfd\xdd\x5b\x28\x95\xc6\x69\x92\x4c\x26\xf0\x32\x28\x2d\x93\xe4\xc2\x80\xaf\x11\x16\x4a\x4b\x08\x0e\x4f\x93\x24\xcb\x32\xc8\x85\xab\x93\x8a\xa0\x42\x0f\x95\xf2\x75\xc8\xa7\x05\x35\xb3\x77\x62\x49\xe9\x9f\x2f\xde\xcf\xaa\x18\x44\x96\x65\xd1\x80\x80\x42\x93\x41\xa0\x32\xda\xb2\xd8\x12\xec\xdd\x04\x49\x8e\x31\xf3\x52\xc9\x78\xff\xf1\x06\xb5\xa6\x8a\xda\x1a\xed\x3f\xf7\x6a\xef\x5b\x77\x3a\x9b\x8d\xcc\x17\x9a\x82\x2c\xb5\xb0\x38\xab\x37\x8f\xee\xef\x8f\x41\x35\xe2\x06\x3b\xc7\x93\x09\x7c\x08\x26\x49\xb2\x08\x06\xe2\x77\x0c\x6f\xd9\xe8\x2c\x49\x3e\x04\xd3\xad\x01\x19\x68\xc9\x7a\xc8\x9e\x3d\x3b\x3c\xca\x60\x8f\x01\x49\x2c\x45\xd0\x1e\xb4\x72\x1e\x8d\x32\x55\x7c\x64\xbf\xa3\xe6\x07\x61\x8a\x25\x48\x6c\x28\x3a\x8e\x7e\x7b\xc2\x62\x34\x9d\x59\x49\xc5\x0d\xda\xa4\xfb\x03\x79\xdc\x4d\x7b\x1c\xc0\x86\x22\xbc\x7e\xdb\x06\x03\xa9\x84\xb4\x05\x06\x71\xca\x5f\x30\x22\xf1\xbc\xc6\xe2\x66\x64\x7b\x81\xf9\x28\xf1\x4c\xd5\xe9\x6c\xa6\xa9\x10\xba\x26\xe7\xe3\xf1\x8e\x00\x56\xc8\x2b\x23\x5b\x52\xc6\xbb\x24\x59\x01\xf6\xff\xc0\x7d\x9f\x15\x34\xe8\x6b\x92\xb0\x82\x56\x58\xd1\xa0\x47\xeb\xd6\x7b\x12\x5d\x61\x55\xeb\x15\x99\x7b\x2d\xdc\x6b\x39\x59\xa5\x5f\xfc\xac\x76\x7e\x7c\x66\xef\x7f\xfa\xac\x92\x15\x64\x33\x8b\xce\xcf\xf8\x3a\xa9\x02\xb3\xcf\x45\xff\xfa\xd5\x55\xf7\x23\x4d\x77\xf6\xde\x2a\xe7\x63\x16\x7a\x03\x0e\xc4\x5c\x28\x2d\x72\x8d\x8f\x89\xfe\x8e\xfb\xd9\xcf\x4a\xfe\x92\xdd\xe7\x3e\x53\xf2\xee\xde\xf7\xe8\x85\xd2\x50\x92\x1d\x00\xec\x3e\xf5\x7f\xba\xff\xf1\x4f\x97\x57\xf7\xb9\xbf\xf4\xc2\x7a\x10\x60\x70\x01\x7f\xa4\x1c\x82\xe3\x7b\xf1\x38\x24\x23\xf7\xd7\x94\x7f\xc6\xf5\x63\xa3\x77\x20\x72\x0a\x0c\x83\x21\x3c\xf6\x73\xc7\xfd\x42\x28\xbf\x8b\xe1\x0b\xee\x09\x1d\x18\xf2\x60\xd1\x07\x6b\x20\x18\xaf\x74\x14\x03\x03\x29\x88\x4b\xa8\x47\xf7\xd8\xe8\x67\x5c\x8a\x66\x3f\xf3\xb7\x11\x0d\xfe\x92\xdd\x75\x7f\x00\xd9\xb0\xc9\x7b\x1f\xd0\x5b\x85\x73\xec\xcb\xa5\xc6\xf1\x76\x69\xa9\x59\x43\x71\x2d\x16\xaa\x54\x28\x21\x5f\x76\x81\xac\x62\x2d\x38\xef\x4b\xbf\xe0\xcb\x9b\x24\x2f\x0c\xe0\xad\x88\x85\xbf\x18\xef\x70\x97\x28\x29\x18\x09\xca\x40\xb6\x5d\x35\xa7\xf0\x62\x9d\xef\x82\x8c\x53\xce\xbb\xa1\xaa\x97\xa4\x35\x2d\x58\x11\xa5\x42\x2d\x5d\x57\x94\x13\x34\xf2\xc7\x4d\xbd\x49\xd3\xae\x24\x0d\x55\xe8\x00\x70\x5a\x4d\x61\x5b\x97\xcf\x87\x33\xdf\x26\x7d\x3f\x7b\xcb\xed\x21\x9e\x3e\x1f\x37\x38\x4f\x5c\x37\x93\x1d\xba\x2f\xa9\xc1\x8e\x06\xa1\xef\xb4\xc4\x4d\x45\x13\x16\x77\x4f\x4e\xe6\x42\x07\x8c\x9e\x2c\xb6\x3a\x76\xd5\x9a\x9b\xb0\xad\x42\x83\x5c\x78\x95\xaf\x63\xb8\x6b\x4b\x1b\xf2\xf9\xee\xec\x9a\x7c\xae\xcc\x10\xba\x26\xba\x89\xb7\x57\x18\x08\xad\x26\x21\x51\xc6\x5c\xee\x9e\xfa\x96\x35\xde\x9d\x8a\xde\x2c\x15\xe8\x1c\xb7\x61\x0d\x15\x1a\xb4\xc2\xf7\xd0\xa2\x16\xd8\xa8\x16\x8c\x46\xd2\xc2\xb0\xe5\x5d\x93\xff\xda\x00\xd9\x72\x0e\x4d\x70\x1e\x72\x04\x01\x9f\x54\x1b\x97\x0e\x00\x6f\xbd\x15\x85\x67\x0d\x08\x90\xca\x62\xe1\xc9\x2e\x61\xaf\x10\x5a\x23\x4b\x63\x1f\x98\xd4\x56\x38\x37\xda\x66\x35\x82\x70\x1c\xdf\xc0\xd8\x2e\x8e\xff\x6c\x42\xeb\xa4\xba\x04\x5e\xa1\x6e\xd0\xd8\x4a\x17\x9b\xda\x98\x3f\x88\xf8\x0a\x32\x1e\x8d\x77\x31\xe6\x75\xb4\xdb\x7d\x29\x4d\xb7\x1a\x55\xaf\xd0\x41\x74\x49\xdf\xdc\xdd\x5a\x93\x02\x6a\xe1\xea\x46\xb4\xfc\xe8\xd0\xfa\xa3\x14\x3a\x37\x5f\x75\xba\xf8\x6a\xa4\x9f\xf5\x8c\x71\x4e\xed\x12\x5e\x75\x37\x29\x49\xae\xd8\x4f\x7f\xad\xba\x5b\xba\x7d\x83\xd6\xd3\x9b\x63\x8d\x0e\x88\xdc\x14\x32\x8f\xce\x67\xdd\x28\xb6\x04\x2c\x6a\x2e\x37\x8c\x5a\x99\x96\xcb\x9d\x91\x50\x08\xc3\x69\xea\x53\xa0\xd5\x4d\xa7\x80\xfe\xa2\x15\xc1\x6a\x48\xff\xd6\x57\xf0\x74\x0e\x69\x5a\x92\x6d\xe0\x1d\x3a\x27\x2a\x3c\xab\x15\x8c\x07\x84\x67\x47\xdb\x97\x8e\xdd\x77\x31\x15\x1c\x90\x17\x37\xe8\x46\xbe\x29\x78\xfe\xc9\x71\xf0\x3c\x99\x3d\x57\x26\x5b\x0b\xa7\xb5\x34\x57\x12\xe5\xc3\x40\x94\x39\xfb\x2e\x57\xd5\xbf\x23\x17\xfe\xd6\x0f\xeb\x14\xfc\x99\x6b\x84\xd6\x9b\x9d\xed\x49\x66\x1b\x28\xc3\xeb\x80\xbe\x7f\x79\x0a\xd9\x3d\xc6\x33\x50\x46\xaa\x42\xf8\xc8\xa2\xf0\x10\x51\xb9\x9a\x82\x96\xe0\xd0\x48\xd8\x82\x22\x5c\x5f\xc3\x6c\x33\xba\xd9\x99\x32\x59\xc2\xd1\xf3\xde\x88\x81\x28\x73\xe5\xc0\xa1\xe7\x1a\x94\x6d\xa3\xcf\x92\x64\xbb\x1e\x0e\x7a\xd0\x38\x47\x2b\xaa\x3e\xaf\x4e\xab\x02\xed\xef\x1d\x9c\xbf\xbd\x80\xdb\x46\x6f\x46\xf3\xbe\x40\x3f\xc4\xa5\x41\x55\xd5\x39\xd9\x9a\x48\x9e\x1d\x1d\x1c\x1d\x1c\x6d\x58\x6e\x83\xff\x0b\xe9\xd0\xe0\xd9\x77\x2c\xb2\x08\xcb\x28\x35\xad\x3e\x8d\x18\xdf\x3c\x74\xf7\x99\x87\xb8\x7f\x87\x52\x09\x73\xd1\x88\x0a\x7f\x50\xda\xa3\xed\x50\x72\x1d\x1e\xb7\xa7\x9e\x2a\x29\xbc\x38\x80\x52\x59\xc7\xb4\xf5\x34\xfe\xf4\xd3\xc5\xf7\x5c\x55\xba\x17\x01\xd7\x92\x71\x78\x10\x25\x66\xf1\x63\xc0\x7e\xbe\x8a\x45\x31\xda\x5e\xf0\x2b\xc6\xe7\x30\x71\x23\x45\x91\x1f\x8b\xfc\xf0\x24\x2d\x9e\x96\x27\xe9\xf1\x71\x79\x92\xe6\x27\xf2\x69\xfa\xf4\x44\xe6\xf2\xe4\xc9\x93\x6f\x50\x1c\x77\x8d\x96\x42\xaf\xee\xaf\xdf\xbf\x3c\xfd\x1a\x16\xb8\xe5\x6e\x94\xdb\x7e\xaa\xe1\xd5\x8c\x82\xcf\x36\x72\x38\x88\xdd\x7f\x40\x17\x35\xb0\x31\xc3\xe2\x7f\x83\x36\xca\xa2\x2b\x63\xed\x72\x9d\xf8\xce\xe4\xf5\xc7\xbd\x7e\x50\xe7\xc7\x49\x0b\x33\xed\xdf\x6d\x14\xcd\xae\x3f\xce\xf6\x59\x4b\x35\xea\x16\x04\xe4\xca\x77\xe1\x2b\x79\x96\x75\x22\x48\x1d\x7b\xf5\x6b\x35\xfc\xfa\xb7\x0a\x56\x70\xfd\x11\x52\x0b\xd3\x10\x94\xec\xa9\x4f\xd3\xbe\xe0\xa6\x52\xb9\x96\x9c\x8a\x15\xf5\xbe\x84\xfc\x4e\xc9\x3b\x7c\x4f\x26\x91\x8b\x54\x2a\x3b\xf0\x31\x7e\x69\x7a\x23\xe6\xe3\xc6\x33\x14\xb7\x58\x0d\xa7\x9f\x54\x9b\x0d\x5a\x29\x82\xb5\x1c\xfe\xba\x1b\x24\x93\x7e\x20\xe5\xdd\x6b\xca\xa3\x86\x86\xb6\xc5\x6b\x1c\xc4\x9a\xfa\xc7\x11\x39\x78\x1d\x93\x48\xa1\x5b\xfa\x12\x7b\x31\xc2\x3b\x0c\x76\x18\x7d\x58\x0f\x49\xd7\x94\xf7\x77\x7a\xfe\x10\x87\x7c\xf0\xaf\x42\xf9\xd8\x7c\x86\xf8\xba\xd7\xfb\x38\x65\x7e\xd1\x46\x1c\x70\xd9\x50\xcc\x01\x27\xe1\x52\x23\xb6\x9b\x0c\x5c\xf1\xe8\xa0\x62\xa7\x1e\x54\x4a\x25\x4f\x53\x66\xad\x7e\xc7\x27\xb2\xe8\x9a\x61\x1c\x3d\x39\x04\x87\x05\x19\xe9\xa6\xe3\x0c\xfe\xaa\x49\xe8\x1d\x9c\xb1\xb3\x87\x08\x8f\xd8\x7e\xa3\x6c\x4f\x26\xf0\xa2\xb8\x31\xb4\xd0\x28\x2b\x8c\x53\x63\x92\x5c\x86\xb6\x25\xeb\xbb\xa1\x9c\x7d\xbc\x3f\xbf\x80\xd7\x56\x18\x0f\xe7\x2f\x8e\xbe\x39\x3c\x3c\xfe\xc3\x34\xf9\x6f\x00\x00\x00\xff\xff\xaf\xe0\xa3\x80\xfd\x11\x00\x00")

func readmeMdReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMdReadmeMd,
		"README.md/README.md",
	)
}

func readmeMdReadmeMd() (*asset, error) {
	bytes, err := readmeMdReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md/README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/email.txt": templateEmailTxt,
	"template/grunt.html": templateGruntHtml,
	"template/header.html": templateHeaderHtml,
	"template/help.html": templateHelpHtml,
	"template/job.html": templateJobHtml,
	"template/jobs.html": templateJobsHtml,
	"template/service.html": templateServiceHtml,
	"template/services.html": templateServicesHtml,
	"README.md/README.md": readmeMdReadmeMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"README.md": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{readmeMdReadmeMd, map[string]*bintree{}},
	}},
	"template": &bintree{nil, map[string]*bintree{
		"email.txt": &bintree{templateEmailTxt, map[string]*bintree{}},
		"grunt.html": &bintree{templateGruntHtml, map[string]*bintree{}},
		"header.html": &bintree{templateHeaderHtml, map[string]*bintree{}},
		"help.html": &bintree{templateHelpHtml, map[string]*bintree{}},
		"job.html": &bintree{templateJobHtml, map[string]*bintree{}},
		"jobs.html": &bintree{templateJobsHtml, map[string]*bintree{}},
		"service.html": &bintree{templateServiceHtml, map[string]*bintree{}},
		"services.html": &bintree{templateServicesHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

