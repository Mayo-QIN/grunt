// Code generated by go-bindata.
// sources:
// assets/.DS_Store
// assets/index.html
// assets/template/email.txt
// assets/template/help.html
// assets/template/job.html
// assets/template/jobs.html
// assets/template/services.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Ds_store = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x98\x3d\x6e\x84\x30\x10\x85\xdf\x38\x14\x96\xd2\xb8\x4c\xe9\x2b\xe4\x06\x16\x22\x27\xc8\x05\xf2\x03\x1d\x11\x91\x42\x7a\xaa\x9c\x2b\x47\x8b\x88\xdf\x0a\x24\x40\xa2\x59\x2d\xbb\x7a\x9f\x64\x7d\x05\x33\x03\xa2\xb0\x67\x0c\xc0\xca\xef\xfa\x11\x08\x00\x3c\xb2\xf1\x83\x55\x3c\xd7\x02\x47\x5b\x5e\x01\x68\xf1\x8a\x1e\x4d\xfd\xf5\xde\xae\xd7\x5a\x60\xff\xc5\x7b\x34\xf8\xc0\xe7\x3c\xff\xad\xeb\x5a\xdb\x59\x44\x08\x21\x84\x10\xbb\xe1\xf1\xea\xef\x2f\xfd\x21\x42\x88\xc3\x31\xee\x0f\x91\x4e\xf4\x90\x6d\x7c\xee\xe8\x62\x96\x13\xe8\x48\x27\x7a\xc8\x36\xc6\x39\xba\xa0\x3d\x1d\xe8\x48\x27\x7a\xc8\xe6\xa6\x65\x1c\x3e\x8c\x6f\x36\x4e\x28\x16\xe8\x48\xa7\xf3\xfc\x1b\x21\xae\x9d\xbb\xac\x30\x9e\xff\x4f\xdb\xf3\xbf\x10\xe2\x86\xb1\xa2\x7a\xae\xca\x69\x20\x58\xe0\xd8\x08\xbc\x30\xe6\xf7\x94\xb8\xd1\x08\xb8\x7c\x61\xf8\x80\x29\x4e\xcd\x80\x10\x07\xe2\x2f\x00\x00\xff\xff\x01\x3b\x23\x55\x04\x18\x00\x00")

func Ds_storeBytes() ([]byte, error) {
	return bindataRead(
		_Ds_store,
		".DS_Store",
	)
}

func Ds_store() (*asset, error) {
	bytes, err := Ds_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1455218728, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x52\x3d\x73\xd4\x30\x10\xed\xef\x57\x08\xd5\x44\x8b\xc9\x0c\x45\x46\x76\x03\x0c\x25\x14\x34\x94\xb2\xbc\xd8\x6b\x64\xc9\x68\xf7\x9c\xdc\xbf\x67\x74\xb2\x93\x21\xc3\x15\x54\xde\xf7\xfc\xe6\xed\xc7\x93\x7d\xf3\xe9\xeb\xc7\xef\x3f\xbe\x7d\x56\x93\x2c\xa1\x3b\xd9\xfa\x51\xca\x4e\xe8\x86\x52\x28\x65\x85\x24\x60\x37\xe6\x73\x14\x0b\x15\xd4\x1f\x0b\x8a\x53\xd1\x2d\xd8\xea\x8d\xf0\x71\x4d\x59\xb4\xf2\x29\x0a\x46\x69\xf5\x23\x0d\x32\xb5\x03\x6e\xe4\xf1\xee\x0a\xde\x2a\x8a\x24\xe4\xc2\x1d\x7b\x17\xb0\x6d\xf4\x6e\x14\x28\xfe\x52\x19\x43\xab\x59\x2e\x01\x79\x42\x14\xad\xa6\x8c\x3f\x5b\x3d\x89\xac\x0f\x00\x8b\x7b\xf2\x43\x34\x7d\x4a\xc2\x92\xdd\x5a\x80\x4f\x0b\x3c\x13\x70\x6f\xee\xcd\x07\xf0\xcc\x2f\x9c\x59\x28\x1a\xcf\x7c\xf4\x61\x9f\x69\x15\xc5\xd9\x57\x5f\x7e\x00\x70\xb3\x7b\x32\x63\x4a\x63\x40\xb7\x12\x5f\x4d\x0b\x07\x81\x7a\x86\xf9\xf7\x19\xf3\x05\x1a\xd3\xbc\x37\xef\x76\x74\x75\x9d\x59\x77\x16\xaa\xe1\x0d\xf7\xff\x98\x7a\x7e\x3d\xf4\x6b\x7b\x0b\x47\x20\xb6\x4f\xc3\xa5\x3b\xd5\x96\x03\x6d\xca\x07\xc7\xdc\xea\x72\x77\x47\x11\xf3\xbe\x6c\xc9\xb0\xe9\xbe\xd4\xd4\xa6\xe6\x85\xcc\xf0\x5c\xbb\xe3\xc6\x18\x56\x53\xa2\xd7\x5d\x29\x2d\xb8\xce\xf6\xff\xd0\x31\xe6\x92\x26\xef\xda\x03\xde\xd4\xcf\xa9\x3f\xb4\xf9\x1c\x23\xc5\x51\x15\xea\x6f\xbd\x85\x81\xb6\xba\x63\x5d\xcd\x42\x7d\x85\xa7\x3f\x01\x00\x00\xff\xff\x09\x38\x65\x8b\x9e\x02\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 670, mode: os.FileMode(436), modTime: time.Unix(1455200451, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateEmailTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\xc1\x6a\x83\x40\x10\x86\xef\xf3\x14\x73\xf0\xd0\x42\xa3\x77\xa1\xb7\xa4\x90\xd2\x52\xa8\xc9\x03\xac\x71\xd4\xb5\xba\x2b\xeb\x6c\xa0\x0c\xf3\xee\x45\x6b\x12\xd2\xde\x76\xff\xfd\xfe\x9d\x8f\x39\xf8\x1c\x45\x52\xf6\xaa\x50\xc4\xb2\xa3\x13\xe7\xf8\x49\x53\xec\x79\x42\x5f\xcf\x6f\x9d\x2f\xd3\x9d\xab\x46\x6f\x1d\xab\x02\xec\xd1\x0c\xc8\x2d\x21\x0d\xc6\xf6\x58\xfb\xb0\xdc\x9a\x10\x1d\x63\xe7\xcb\xff\x1d\x7c\x58\xa3\xe3\x71\xbf\x55\x7d\x4c\x01\x5e\x7d\x89\x5b\x62\x63\xfb\x09\x4d\x20\x6c\x29\x50\x8e\x2d\xf3\x98\x67\x99\x48\x7a\xf2\xae\xb6\x4d\x5a\x50\x38\x53\x50\xcd\x3a\x5f\x66\x77\x9f\x00\x88\x24\xbf\x14\xe6\xcf\xb8\x16\x54\x45\x92\x18\x6d\xb5\x64\x37\x5a\x24\x18\xd7\x10\x26\x5f\xf4\xfd\x84\xc9\xd9\xf4\x91\xae\xc8\x8b\xed\xe9\xdd\x8c\xaa\x30\x9f\x50\x64\xa6\x54\x71\xb3\xb9\x09\x25\x7f\x85\x02\x4d\xbc\x5a\x2d\x03\x55\xb3\xda\xf6\x94\x5d\xda\x20\x42\xae\x9a\x3d\x0f\x2d\x2d\x6b\x99\xd8\x04\xa6\x0a\x0d\x5f\x36\x54\xcc\xc9\xc1\x0e\xa4\x7a\xa5\x6a\xeb\xec\xd4\xde\x61\x3b\x57\xad\x10\xbc\xf9\x26\x87\x35\xfe\x88\x3c\x46\x4e\x0b\x0e\xd6\x35\xaa\xf0\x13\x00\x00\xff\xff\x0f\x40\xe2\xe8\xcb\x01\x00\x00")

func templateEmailTxtBytes() ([]byte, error) {
	return bindataRead(
		_templateEmailTxt,
		"template/email.txt",
	)
}

func templateEmailTxt() (*asset, error) {
	bytes, err := templateEmailTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/email.txt", size: 459, mode: os.FileMode(436), modTime: time.Unix(1455276966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHelpHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xf2\x48\xcd\x29\x50\x08\x49\xcd\x2d\xc8\x49\x2c\x49\xe5\x02\x04\x00\x00\xff\xff\xfc\xab\xa9\x0e\x0e\x00\x00\x00")

func templateHelpHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateHelpHtml,
		"template/help.html",
	)
}

func templateHelpHtml() (*asset, error) {
	bytes, err := templateHelpHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/help.html", size: 14, mode: os.FileMode(420), modTime: time.Unix(1455198384, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateJobHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x4f\x6f\xdb\x3e\x0c\xbd\xf7\x53\xe8\x27\xf4\xd8\x58\xbf\xac\xc3\x50\x14\xb2\x2f\xed\x06\x6c\xe8\xd0\x02\x5b\x0f\xdb\x4d\xb1\x99\x98\xa9\x2c\x79\x12\x9d\x34\x33\xfc\xdd\x07\x59\x4e\xea\x64\xfd\xb3\xf6\xe2\xf8\xd1\xe4\xe3\xa3\xf8\x84\xc8\xff\x2e\xaf\x2f\xbe\xff\xb8\xf9\xc8\x4a\xaa\x74\x76\x24\xe3\x0f\x63\xb2\x04\x55\x84\x17\xc6\x24\x21\x69\xc8\x16\xae\x31\xc4\xda\x36\x59\xda\x59\x72\x7b\xfb\xf9\xb2\xeb\xa4\x88\x9f\x62\x5a\x05\xa4\x58\x5e\x2a\xe7\x81\x52\xde\xd0\x7c\x72\xc6\xc7\x9f\x8c\xaa\x20\xe5\x2b\x84\x75\x6d\x1d\x71\x96\x5b\x43\x60\x28\xe5\x6b\x2c\xa8\x4c\x0b\x58\x61\x0e\x93\x1e\x9c\x30\x34\x48\xa8\xf4\xc4\xe7\x4a\x43\x3a\xdd\x12\x69\x34\x77\xcc\x81\x4e\xb9\xa7\x8d\x06\x5f\x02\x10\x67\xa5\x83\x79\xca\x4b\xa2\xfa\x5c\x88\x4a\xdd\xe7\x85\x49\x66\xd6\x92\x27\xa7\xea\x00\x72\x5b\x89\x5d\x40\x9c\x26\xa7\xc9\x07\x91\x7b\xff\x10\x4b\x2a\x34\x49\xee\xfd\xb6\x8f\xcf\x1d\xd6\xc4\xbc\xcb\x23\xaf\x3f\x17\x42\x2d\xd5\x7d\xb2\xb0\x76\xa1\x41\xd5\xe8\x7b\xd2\x10\x13\x1a\x67\x5e\x2c\x7f\x35\xe0\x36\x62\x9a\x4c\xdf\x25\xff\x0f\xa8\x67\x5d\x7a\x9e\x49\x11\x09\x9f\x60\x7f\x85\xea\xe5\xa1\xe8\x43\x7a\x29\xb6\x9b\x93\x33\x5b\x6c\xb2\xa3\xd8\xb2\xc0\x15\xcb\xb5\xf2\x3e\xe5\xe1\xdc\x15\x1a\x70\xc3\xb0\x61\xd9\xd3\xec\x8b\x9d\xb1\x02\x48\xa1\x96\xa2\x9c\x0e\x65\x6d\xcb\xd6\x48\x25\x0b\x3b\x67\x5d\xb7\x4d\x1f\x91\x39\xbb\xde\xd1\x1c\xb6\xd1\x13\x5f\x4d\xde\xf3\x2c\x98\x45\x8a\x02\x57\xcf\x26\x9e\xf1\xac\x6d\x77\xc6\x1a\x65\x0f\xe0\x8d\xcd\x2f\x6c\x55\x29\x53\x30\x8d\x06\xfe\x55\xc4\x50\x73\x85\x06\x1e\xd7\x12\xc1\x1b\x15\xdd\x84\x1b\xf2\x3a\x41\xb1\xe4\x45\x59\x5b\x44\x6a\xa6\x61\x4b\x14\x41\xff\x9c\x78\x72\x58\x43\x31\x96\x48\x0f\x17\x7d\x1b\x71\x63\xd8\xa7\x64\xd7\x0d\xd5\x0d\xb1\x39\x6a\xf0\x52\x50\xb9\x57\x20\xc6\x15\xe1\xeb\x1e\xa3\xa4\xe8\xc3\x67\x3a\x8c\x40\xdb\x1e\x37\x0d\x16\xec\x3c\x65\x83\x17\xf6\x0a\x8b\x4c\xaa\xe1\xba\x0b\x07\x9e\xc4\xd2\xce\xc4\x50\xd3\x75\xe2\x37\xd6\x3c\xfb\x89\x75\x2f\x94\xd9\x39\x53\x5a\x33\x34\x75\x43\x9e\x05\x13\xd8\x7e\x0c\x2f\x85\xca\xa4\xa0\xbd\xb1\xdb\xd6\x29\xb3\x00\x76\x7c\x07\x9b\x13\x76\xbc\x52\xba\x81\x5e\xc5\x27\xd4\xf0\x55\xd5\x07\x42\xfe\x3a\xa3\x17\x94\x05\x41\x01\xde\xc1\xa6\xeb\xc2\x4e\xe3\xdb\xa1\x8a\xfd\xb3\x8c\xba\xc0\x14\xa3\xe6\x52\xec\x9d\xa7\x14\xfd\x66\xb3\x47\xbc\x58\x2b\x03\x9a\xf5\xcf\x49\x01\x73\xd5\x68\x7a\xc2\x9b\x31\x27\xac\x0d\xcd\x82\x67\x57\x76\xf1\x8c\x31\x63\x72\xd0\xc0\xf7\x94\xd7\x0e\x82\x55\xa3\x53\x92\x6f\xe4\xd0\x2c\xc2\x80\x21\x3e\x52\xff\xc2\x65\x1a\xc6\x1d\xc5\x76\x59\x52\xc4\xc1\xa5\x88\x7f\x52\x7f\x02\x00\x00\xff\xff\x00\xdb\x4a\x1b\xbc\x06\x00\x00")

func templateJobHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateJobHtml,
		"template/job.html",
	)
}

func templateJobHtml() (*asset, error) {
	bytes, err := templateJobHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/job.html", size: 1724, mode: os.FileMode(436), modTime: time.Unix(1466169070, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateJobsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xc1\x6e\xdb\x30\x0c\xbd\xe7\x2b\x34\x9f\x17\x73\x59\x81\x61\x28\x64\x5f\xda\x1e\x36\x0c\xd8\x80\xb5\x87\x1d\x65\x89\x8d\xe5\xc9\xb2\x27\xd2\x69\x03\x23\xff\x3e\xc8\x8a\xd3\xb4\x4d\x3a\xec\x62\x8b\xe4\xe3\xa3\xf8\x48\x5b\xbe\xbb\xfe\x7e\x75\xfb\xeb\xc7\x8d\xa8\xb9\x75\xe5\x42\xa6\x97\x10\xb2\x46\x65\xe2\x41\x08\xc9\x96\x1d\x96\xeb\x30\x78\x16\x4d\x57\x91\x84\xe4\x49\xd1\x16\x59\x09\x5d\xab\x40\xc8\x45\x36\xf0\xfd\xf2\x73\x76\x1c\xf2\xaa\xc5\x22\xdb\x58\x7c\xe8\xbb\xc0\x99\xd0\x9d\x67\xf4\x5c\x64\x0f\xd6\x70\x5d\x18\xdc\x58\x8d\xcb\xc9\x78\x2f\xac\xb7\x6c\x95\x5b\x92\x56\x0e\x8b\xd5\x4c\xe4\xac\xff\x2d\x02\xba\x22\x23\xde\x3a\xa4\x1a\x91\x33\x51\x07\xbc\x2f\xb2\x9a\xb9\xbf\x04\x68\xd5\xa3\x36\x3e\xaf\xba\x8e\x89\x83\xea\xa3\xa1\xbb\x16\x0e\x0e\xb8\xc8\x2f\xf2\x4f\xa0\x89\x9e\x7c\x79\x6b\x7d\xae\x89\xe6\x3a\xa4\x83\xed\x59\x50\xd0\x89\x97\x2e\x01\x54\xa3\x1e\xf3\x75\xd7\xad\x1d\xaa\xde\xd2\x44\x1a\x7d\xe0\x6c\x45\xd0\xfc\x19\x30\x6c\x61\x95\xaf\x3e\xe6\x1f\xf6\xd6\xc4\xda\x50\x56\x4a\x48\x84\x67\xd8\xff\xe3\xd6\xcd\xcb\x4b\xbf\xa4\x97\x30\x0f\x4c\x56\x9d\xd9\x96\x8b\x54\xd2\xd8\x8d\xd0\x4e\x11\x15\x59\xd4\x5d\x59\x8f\x61\xdf\x6c\x9c\xf1\xaa\xfc\x3a\xcd\xb3\x5e\xed\x13\x84\xb8\x1a\x42\x40\xcf\x6e\x2b\xc6\xd1\xa1\x17\x79\x9c\xf8\x6e\x27\xc2\xe0\xbd\xf5\xeb\x69\x01\x0e\xf9\x01\x0e\x5c\xac\x2a\x87\x73\xad\x64\x4c\xcf\x25\x71\xb0\x3d\x9a\x43\xd5\x88\x7d\x5a\xae\xd9\x13\x8e\xcd\x09\x52\xde\xdd\x7d\xb9\x96\xc0\xf5\xeb\x88\xee\xda\x56\x79\x23\x9c\xf5\x78\x1a\x41\xac\x02\x0b\xb6\xed\xf9\x38\x0f\x74\x3a\x86\xde\x9c\xcc\x94\x70\x7c\xcb\x18\x7d\xd6\x85\xe4\x24\xfc\x53\xc2\x38\x06\xe5\xd7\x38\x4b\xf8\x76\xbf\xa6\x94\x6a\xbf\xd1\xd0\x74\x15\x8c\x63\x1e\x05\xd8\xed\xb2\xf2\x70\x94\xa0\x4a\x09\x6c\x5e\xe7\x8e\x63\x7e\x95\x44\xf9\x66\x3d\x46\xe4\x19\xd4\xcf\x28\xcc\xad\x6d\xff\x81\xe1\x81\xde\x00\xdc\x78\x73\x9a\x22\x49\xf4\x4c\x02\xf4\xe6\xa8\x75\x09\xcf\x54\x92\x30\xed\xc8\xfe\xfb\x00\x63\x37\x69\x97\x13\x46\x42\xfa\x1b\x2d\x16\x7f\x03\x00\x00\xff\xff\x41\xa3\x7e\xf9\xa7\x04\x00\x00")

func templateJobsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateJobsHtml,
		"template/jobs.html",
	)
}

func templateJobsHtml() (*asset, error) {
	bytes, err := templateJobsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/jobs.html", size: 1191, mode: os.FileMode(420), modTime: time.Unix(1455221813, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateServicesHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\x4d\x6f\xdb\x30\x0c\xbd\xf7\x57\x68\x3e\x2f\xd6\xb2\x02\x3b\x14\xb2\x2f\x69\x6f\x03\x56\x60\xbb\xec\xa8\x48\x6c\xcc\x4c\xa6\x3c\x91\x49\x1b\x18\xf9\xef\x83\xad\x38\x4e\x3f\x72\xd8\x25\x11\xf9\xa8\xc7\xf7\x48\xd9\x7c\xba\xff\xb1\xfa\xf5\xfb\xf1\x41\x35\xd2\x86\xfa\xc6\xe4\x3f\xa5\x4c\x03\xd6\x0f\x07\xa5\x8c\xa0\x04\xa8\x37\x69\x47\xa2\x18\xd2\x1e\x1d\xb0\xd1\x39\x9b\x2b\x5a\x10\xab\xc8\xb6\x50\x15\x7b\x84\xe7\x2e\x26\x29\x94\x8b\x24\x40\x52\x15\xcf\xe8\xa5\xa9\x3c\x0c\x17\x17\x63\xf0\x59\x21\xa1\xa0\x0d\x0b\x76\x36\x40\xb5\x2c\x4e\x44\x01\xe9\x8f\x4a\x10\xaa\x82\xe5\x10\x80\x1b\x00\x29\x54\x93\xe0\xa9\x2a\x1a\x91\xee\x4e\xeb\xd6\xbe\x38\x4f\xe5\x3a\x46\x61\x49\xb6\x1b\x02\x17\x5b\x7d\x4e\xe8\xdb\xf2\xb6\xfc\xa6\x1d\xf3\x9c\x2b\x5b\xa4\xd2\x31\x4f\x7d\xd8\x25\xec\x44\x71\x72\x99\x97\xef\xb4\xb6\x5b\xfb\x52\x6e\x62\xdc\x04\xb0\x1d\xf2\x48\x3a\xe4\x74\xc0\x35\xeb\xed\xdf\x1d\xa4\x83\x5e\x96\xcb\xaf\xe5\x97\x53\x34\xb2\x6e\xb9\xa8\x8d\xce\x84\x57\xd8\xff\x43\xf5\xf6\xad\xe8\xb7\xf4\x46\x4f\x9b\x31\xeb\xe8\x0f\xf5\x4d\x6e\xe9\x71\xaf\x5c\xb0\xcc\x55\x31\xcc\xdd\x22\x41\x3a\x99\x1d\x96\xb9\xac\x7f\x9e\x17\xd7\x2c\x4f\x97\x56\xbb\x94\x80\x24\x1c\x54\xdf\x07\x20\x55\x4e\xcb\x3d\x1e\xcf\x7b\x56\x76\x6f\x31\xd8\x75\x80\xdc\xa7\x49\x7a\x7a\x15\x43\x72\xea\x99\x83\xf1\x77\xc1\x92\xb0\x03\x3f\x77\x97\xf9\x2d\x0d\x51\x9a\x8e\x23\x54\x03\xf9\x2e\x22\x89\xd1\xd2\xbc\x46\x5c\x6c\x5b\x4b\x5e\x05\x24\x78\x8f\x7a\xc8\x43\xc1\x48\x1f\x81\x4f\x76\x17\x84\x2f\x11\xa3\xe7\xd6\x43\x7e\x14\x75\x56\x95\x87\x99\xa3\xbe\x4f\x96\x36\x70\x39\x90\x8f\xd5\xfb\xba\xef\xcb\x07\xf2\x8f\x83\x81\xe3\xd1\x68\xf1\xef\xe0\x55\x76\xf1\x1d\x09\xae\x54\xdc\xcf\x4e\xae\x56\x64\x3b\xaf\xe1\x4b\x43\x67\xe5\x40\x7e\x56\xab\x2f\x6c\x19\x3d\xae\x67\x0a\x3c\xee\xf3\x73\xca\x15\x46\xe7\x2f\xff\x5f\x00\x00\x00\xff\xff\x5c\xd8\xb0\x1f\x11\x04\x00\x00")

func templateServicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateServicesHtml,
		"template/services.html",
	)
}

func templateServicesHtml() (*asset, error) {
	bytes, err := templateServicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/services.html", size: 1041, mode: os.FileMode(436), modTime: time.Unix(1462558367, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".DS_Store": Ds_store,
	"index.html": indexHtml,
	"template/email.txt": templateEmailTxt,
	"template/help.html": templateHelpHtml,
	"template/job.html": templateJobHtml,
	"template/jobs.html": templateJobsHtml,
	"template/services.html": templateServicesHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".DS_Store": &bintree{Ds_store, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"email.txt": &bintree{templateEmailTxt, map[string]*bintree{}},
		"help.html": &bintree{templateHelpHtml, map[string]*bintree{}},
		"job.html": &bintree{templateJobHtml, map[string]*bintree{}},
		"jobs.html": &bintree{templateJobsHtml, map[string]*bintree{}},
		"services.html": &bintree{templateServicesHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

